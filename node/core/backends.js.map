{"version":3,"file":"backends.js","sourceRoot":"","sources":["../../../src/core/backends.ts"],"names":[],"mappings":";AAEA,+BAAoC;AACpC,sDAAiD;AACjD,8CAAyC;AACzC,oDAA+C;AAC/C,0DAAqD;AACrD,8CAAyC;AACzC,gDAA2C;AAC3C,kDAA6C;AAC7C,wDAAmD;AACnD,sEAAiE;AACjE,kDAA6C;AAC7C,gDAA2C;AAC3C,sDAAiD;AACjD,0CAAqC;AACrC,0CAAqC;AAErC,sFAAsF;AACtF,CAAC,qBAAW,EAAE,iBAAO,EAAE,oBAAU,EAAE,uBAAa,EAAE,iBAAO,EAAE,kBAAQ,EAAE,mBAAS,EAAE,eAAK,EAAE,sBAAY,EAAE,6BAAmB,EAAE,mBAAS,EAAE,kBAAQ,EAAE,qBAAW,EAAE,eAAK,CAAC,CAAC,OAAO,CAAC,UAAC,MAA6B;IACvM,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,MAAM,CAAC,MAAM,GAAG,UAAS,IAAU,EAAE,EAA4B;QAC/D,IAAM,MAAM,GAAG,OAAM,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;QAC3C,IAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACxC,IAAM,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAE1C,SAAS,SAAS,CAAC,CAAY;YAC7B,IAAI,CAAC,EAAE;gBACL,YAAY,CAAC,CAAC,CAAC,CAAC;aACjB;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;aACnD;QACH,CAAC;QAED,mBAAY,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,IAAM,QAAQ,GAAG,EAAE,WAAW,uBAAA,EAAE,OAAO,mBAAA,EAAE,UAAU,sBAAA,EAAE,aAAa,yBAAA,EAAE,OAAO,mBAAA,EAAE,QAAQ,oBAAA,EAAE,SAAS,qBAAA,EAAE,KAAK,iBAAA,EAAE,YAAY,wBAAA,EAAE,mBAAmB,+BAAA,EAAE,SAAS,qBAAA,EAAE,QAAQ,oBAAA,EAAE,WAAW,uBAAA,EAAE,cAAc,EAAE,qBAAW,EAAE,KAAK,iBAAA,EAAE,CAAC;AACnN,2EAA2E;AAC3E,IAAM,CAAC,GAA4C,QAAQ,CAAC;AAC5D,gDAAgD;AAChD,CAAC,CAAC;AACF,+CAA+C;AAC/C,kBAAe,QAAQ,CAAC","sourcesContent":["import {FileSystemConstructor, BFSCallback, FileSystem} from './file_system';\nimport {ApiError} from './api_error';\nimport {checkOptions} from './util';\nimport AsyncMirror from '../backend/AsyncMirror';\nimport Dropbox from '../backend/Dropbox';\nimport Emscripten from '../backend/Emscripten';\nimport FolderAdapter from '../backend/FolderAdapter';\nimport HTML5FS from '../backend/HTML5FS';\nimport InMemory from '../backend/InMemory';\nimport IndexedDB from '../backend/IndexedDB';\nimport LocalStorage from '../backend/LocalStorage';\nimport MountableFileSystem from '../backend/MountableFileSystem';\nimport OverlayFS from '../backend/OverlayFS';\nimport WorkerFS from '../backend/WorkerFS';\nimport HTTPRequest from '../backend/HTTPRequest';\nimport ZipFS from '../backend/ZipFS';\nimport IsoFS from '../backend/IsoFS';\n\n// Monkey-patch `Create` functions to check options before file system initialization.\n[AsyncMirror, Dropbox, Emscripten, FolderAdapter, HTML5FS, InMemory, IndexedDB, IsoFS, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, HTTPRequest, ZipFS].forEach((fsType: FileSystemConstructor) => {\n  const create = fsType.Create;\n  fsType.Create = function(opts?: any, cb?: BFSCallback<FileSystem>): void {\n    const oneArg = typeof(opts) === \"function\";\n    const normalizedCb = oneArg ? opts : cb;\n    const normalizedOpts = oneArg ? {} : opts;\n\n    function wrappedCb(e?: ApiError): void {\n      if (e) {\n        normalizedCb(e);\n      } else {\n        create.call(fsType, normalizedOpts, normalizedCb);\n      }\n    }\n\n    checkOptions(fsType, normalizedOpts, wrappedCb);\n  };\n});\n\n/**\n * @hidden\n */\nconst Backends = { AsyncMirror, Dropbox, Emscripten, FolderAdapter, HTML5FS, InMemory, IndexedDB, IsoFS, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, HTTPRequest, XmlHttpRequest: HTTPRequest, ZipFS };\n// Make sure all backends cast to FileSystemConstructor (for type checking)\nconst _: {[name: string]: FileSystemConstructor} = Backends;\n// tslint:disable-next-line:no-unused-expression\n_;\n// tslint:enable-next-line:no-unused-expression\nexport default Backends;\n"]}